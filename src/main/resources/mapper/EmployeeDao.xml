<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dms.dao.EmployeeDao">

    <resultMap id="EmployeeMap" type="EmployeeDto">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="position" column="position"/>
        <result property="hiredate" column="hiredate" typeHandler="com.dms.handler.LocalDateTimeHandler"/>
        <result property="baseWage" column="base_wage" typeHandler="com.dms.handler.BigDecimalHandler"/>
        <result property="bankCardNumber" column="bank_card_number"/>
        <result property="workingAgeSubsidy" column="working_age_subsidy"/>
        <result property="overtime" column="overtime"/>
        <result property="mealsSubsidy" column="meals_subsidy"/>
        <result property="secrecySubsidy" column="secrecy_subsidy"/>
        <result property="communicationFee" column="communication_fee"/>
        <result property="jywCommissionRatio" column="jyw_commission_ratio"/>
        <result property="commencementRatio" column="commencement_ratio"/>
        <result property="completionRatio" column="completion_ratio"/>
        <result property="renovateCommossionRatio" column="renovate_commossion_ratio"/>
    </resultMap>

    <resultMap id="FinanceMap" type="FinanceDto">
        <id property="id" column="finance_id"/>
        <result property="employeeId" column="employee_id"/>
        <result property="employeeName" column="employee_name"/>
        <result property="baseWage" column="base_wage"/>
        <result property="overtime" column="overtime"/>
        <result property="mealsSubsidy" column="meals_subsidy"/>
        <result property="secrecySubsidy" column="secrecy_subsidy"/>
        <result property="communicationFee" column="communication_fee"/>
        <result property="attendance" column="attendance"/>
        <result property="bonus" column="bonus"/>
        <result property="workingAgeSubsidy" column="working_age_subsidy"/>
        <result property="performanceAppraisal" column="performance_appraisal"/>
        <result property="otherSubsidy" column="other_subsidy"/>
        <result property="exhibitionCharge" column="exhibition_charge"/>
        <result property="charge" column="charge"/>
        <result property="chargeComments" column="charge_comments"/>
        <result property="casualLeave" column="casual_leave"/>
        <result property="sickLeave" column="sick_leave"/>
        <result property="storageCharge" column="storage_charge"/>
        <result property="grossPay" column="gross_pay"/>
        <result property="medicalInsurance" column="medical_insurance"/>
        <result property="housingFund" column="housing_fund"/>
        <result property="beforeTaxSalary" column="before_tax_salary"/>
        <result property="personalIncomeTax" column="personal_income_tax"/>
        <result property="afterTaxSalary" column="after_tax_salary"/>
    </resultMap>

    <select id="getAttendance" resultType="Attendance">
        select * from attendance order by "value"
    </select>

    <select id="getMonths" resultType="Month">
        select * from "month" order by text desc
    </select>

    <select id="getPositions" resultType="Position">
        select * from "position" order by "value"
    </select>

    <select id="getEmployeeCount" parameterType="DataGridRequest" resultType="int">
        select count(id) from "employee"
        <where>
            <if test="key != null">
                <bind name="pattern" value="'%' + key + '%'"/>
                name like #{pattern}
            </if>
        </where>
    </select>


    <select id="getEmployees" parameterType="DataGridRequest" resultMap="EmployeeMap">
        -- select * from employee
        select * from (select *, row_number() over (order by id) rn from "employee" ) t
        <where>
            t.rn BETWEEN #{start} and #{end}
            <if test="key != null">
                <bind name="pattern" value="'%' + key + '%'"/>
                and t.name like #{pattern}
            </if>
            <choose>
                <when test="sortField == 'name'">
                    order by name
                </when>
                <when test="sortField == 'hiredate'">
                    order by hiredate
                </when>
                <when test="sortField == 'baseWage'">
                    order by base_wage
                </when>
                <otherwise>
                    order by id
                </otherwise>
            </choose>
            <choose>
                <when test="sortOrder == 'desc'">
                    desc
                </when>
                <otherwise>
                    asc
                </otherwise>
            </choose>
        </where>
    </select>


    <select id="getFinances" parameterType="DataGridRequest" resultMap="FinanceMap">
        select t.eid as employee_id, t.name as employee_name, t.base_wage, t.overtime, t.meals_subsidy,
        t.secrecy_subsidy, t.communication_fee,
        t.fid as finance_id, t.month,
        t.attendance, t.bonus, t.working_age_subsidy, t.performance_appraisal,
        t.other_subsidy, t.exhibition_charge, t.charge,
        t.charge_comments, t.casual_leave, t.sick_leave,
        t.storage_charge, t.gross_pay, t.medical_insurance,
        t.housing_fund, t.before_tax_salary, t.personal_income_tax, t.after_tax_salary
        from (
        select e.id as eid, e.name, e.base_wage, e.overtime, e.meals_subsidy, e.secrecy_subsidy,
        e.communication_fee, e.working_age_subsidy, f.id as fid, f.month, f.attendance,
        f.bonus, f.performance_appraisal,
        f.other_subsidy, f.exhibition_charge, f.charge,
        f.charge_comments, f.casual_leave, f.sick_leave,
        f.storage_charge, f.gross_pay, f.medical_insurance,
        f.housing_fund, f.before_tax_salary, f.personal_income_tax, f.after_tax_salary,
        row_number() over (order by e.id) as rn from employee e left join finance f on e.id = f.employee_id and
        f."month" = #{month}
        ) t
        <where>
            t.rn BETWEEN #{start} and #{end}
        </where>
    </select>

    <insert id="saveEmployees" parameterType="list">
        insert into "employee" (name, "position", hiredate, base_wage, bank_card_number, working_age_subsidy, overtime,
        meals_subsidy, secrecy_subsidy, communication_fee, jyw_commission_ratio, commencement_ratio, completion_ratio,
        renovate_commossion_ratio)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.name}, #{item.position}, #{item.hiredate}, #{item.baseWage}, #{item.bankCardNumber},
            #{item.workingAgeSubsidy}, #{item.overtime},
            #{item.mealsSubsidy}, #{item.secrecySubsidy}, #{item.communicationFee},
            ${item.jywCommissionRatio}, #{item.commencementRatio}, #{item.completionRatio},
            #{item.renovateCommossionRatio})
        </foreach>
    </insert>

    <update id="updateEmployees" parameterType="list">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update "employee"
            set name = #{item.name},
            position = #{item.position},
            hiredate = #{item.hiredate},
            base_wage = #{item.baseWage},
            bank_card_number = #{item.bankCardNumber},
            working_age_subsidy = #{item.workingAgeSubsidy},
            overtime = #{item.overtime},
            meals_subsidy = #{item.mealsSubsidy},
            secrecy_subsidy = #{item.secrecySubsidy},
            communication_fee = #{item.communicationFee},
            jyw_commission_ratio = ${item.jywCommissionRatio},
            commencement_ratio = #{item.commencementRatio},
            completion_ratio = #{item.completionRatio},
            renovate_commossion_ratio = #{item.renovateCommossionRatio}
            where id = #{item.id}
        </foreach>
    </update>

    <insert id="saveFinance" parameterType="FinanceDto">
        insert into "finance" (created_on, employee_id, month, attendance, bonus, performance_appraisal,
         other_subsidy, exhibition_charge, charge, charge_comments, casual_leave, sick_leave, storage_charge,
         gross_pay, medical_insurance, housing_fund, before_tax_salary, personal_income_tax, after_tax_salary)
        values (current_timestamp, #{employeeId}, #{month}, #{attendance}, #{bonus}, #{performanceAppraisal},
         #{otherSubsidy}, #{exhibitionCharge}, #{charge}, #{chargeComments}, #{casualLeave}, #{sickLeave}, #{storageCharge},
         #{grossPay}, #{medicalInsurance}, #{housingFund}, #{beforeTaxSalary}, #{personalIncomeTax}, #{afterTaxSalary})
    </insert>

    <update id="updateFinance" parameterType="FinanceDto">
        update finance
        set attendance =  #{attendance},
            bonus = #{bonus},
            performance_appraisal = #{performanceAppraisal},
            other_subsidy = #{otherSubsidy},
            exhibition_charge = #{exhibitionCharge},
            charge = #{charge},
            charge_comments = #{chargeComments},
            casual_leave = #{casualLeave},
            sick_leave = #{sickLeave},
            storage_charge = #{storageCharge},
            gross_pay = #{grossPay},
            medical_insurance = #{medicalInsurance},
            housing_fund = #{housingFund},
            before_tax_salary = #{beforeTaxSalary},
            personal_income_tax = #{personalIncomeTax},
            after_tax_salary = #{afterTaxSalary}
         where id = #{id}
    </update>

</mapper>